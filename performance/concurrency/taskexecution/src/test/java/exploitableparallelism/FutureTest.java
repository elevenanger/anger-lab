package exploitableparallelism;

import cn.anger.util.concurrency.ThreadUtil;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.concurrent.*;

/**
 * @author : anger
 */
public class FutureTest {
    final ExecutorService exec = new ForkJoinPool();

    @Test
    void testRunnableToFuture() {
        Runnable show = () -> {
            ThreadUtil.sleep(1000);
            System.out.println(LocalDate.now());
        };
        Future<?> future = exec.submit(show);
        exec.shutdownNow();
        Assertions.assertThrows(CancellationException.class, future::get);
    }

    @Test
    void testCallableToFuture() {
        Callable<LocalDate> getTime = () -> {
            ThreadUtil.sleep(1000);
            return LocalDate.now();
        };

        Future<LocalDate> future = exec.submit(getTime);
        exec.shutdownNow();
        Assertions.assertThrows(CancellationException.class, future::get);
    }

    @Test
    void testFutureTask() {
        FutureTask<LocalDate> futureTask = new FutureTask<>(() -> {
            ThreadUtil.sleep(1000);
            return LocalDate.now();
        });
        futureTask.cancel(true);
        futureTask.run();
        Assertions.assertThrows(CancellationException.class, futureTask::get);
    }

}
