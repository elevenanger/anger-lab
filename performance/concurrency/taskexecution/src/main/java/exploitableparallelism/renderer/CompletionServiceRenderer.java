package exploitableparallelism.renderer;

import cn.anger.util.exception.LaunderThrowable;
import cn.anger.util.timer.stopwatch.StopWatch;

import java.util.List;
import java.util.concurrent.*;

/**
 * @author : anger
 * 使用 CompletionService 并发下载图片
 */
public class CompletionServiceRenderer extends SimpleImageRenderer {
    private final ExecutorService exec;

    public CompletionServiceRenderer(ExecutorService exec) {
        this.exec = exec;
    }

    @Override
    void renderPage(CharSequence source) {
        StopWatch stopWatch = StopWatch.get();
        stopWatch.start("completion service renderer");
        CompletionService<ImageData> completionService =
            new ExecutorCompletionService<>(exec);
        List<ImageInfo> infos = scanForImageInfo(source);
        infos.forEach(
            imageInfo -> completionService.submit(imageInfo::downloadImage));

        renderText(source);
        try {
            for (int i = 0; i < infos.size(); i++) {
                // take 取出队列中的元素
                Future<ImageData> future = completionService.take();
                ImageData data = future.get();
                renderImage(data);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } catch (ExecutionException e) {
            throw LaunderThrowable.launderThrowable(e.getCause());
        }
        stopWatch.stopAndPrint();
    }
}
