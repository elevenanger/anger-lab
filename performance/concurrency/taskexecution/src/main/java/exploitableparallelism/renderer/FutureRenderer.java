package exploitableparallelism.renderer;

import cn.anger.exception.LaunderThrowable;
import cn.anger.timer.stopwatch.StopWatch;

import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Collectors;

/**
 * @author : anger
 * 使用 Future 来实现页面渲染
 * 一个 Future 用来下载图片
 * 使得图片下载和页面渲染可以同时进行
 */
public class FutureRenderer extends SimpleImageRenderer {
    private final ExecutorService exec = Executors.newSingleThreadExecutor();
    @Override
    void renderPage(CharSequence source) {
        StopWatch stopWatch = StopWatch.get();
        stopWatch.start("future renderer");
        // 下载图片
        Callable<List<ImageData>> task = () ->
            scanForImageInfo(source).stream()
                .map(ImageInfo::downloadImage)
                .collect(Collectors.toList());
        // 提交图片下载任务
        Future<List<ImageData>> future = exec.submit(task);
        // 开始渲染文本
        renderText(source);

        try {
            // 获取图片下载的结果，get 会阻塞当前线程直到任务结束
            future.get().forEach(this::renderImage);
        } catch (ExecutionException e) {
            throw LaunderThrowable.launderThrowable(e.getCause());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            future.cancel(true);
        }
        stopWatch.stopAndPrint();
    }
}
